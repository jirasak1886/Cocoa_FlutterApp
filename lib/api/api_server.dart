// api_server.dart
import 'package:cocoa_app/utils/variable.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';

class ApiServer {
  // ======================== CONFIG =========================
  // static const String baseUrl = 'http://127.0.0.1:5000';

  static const List<String> alternativeUrls = [
    'http://127.0.0.1:5000',
    'http://localhost:5000',
    'http://10.0.2.2:5000', // Android emulator
  ];

  // ‡πÅ‡∏™‡∏î‡∏á token ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô debug log ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î)
  static const bool _LOG_FULL_TOKEN_IN_DEBUG = false;

  // ======================== STATE ==========================
  static String? _jwtToken;
  static String? _currentBaseUrl = baseUrl;

  // ======================== URL ============================
  static void setBaseUrl(String url) {
    _currentBaseUrl = url;
    if (kDebugMode) {
      print('üåê Base URL set to: $_currentBaseUrl');
    }
  }

  static String get currentBaseUrl => _currentBaseUrl ?? baseUrl;

  // ======================== TOKEN ==========================
  static void updateAuthHeaders(String token) {
    _jwtToken = token;
    if (kDebugMode) print('üîë JWT Token updated');
  }

  static void clearAuthHeaders() {
    _jwtToken = null;
    if (kDebugMode) print('üóëÔ∏è JWT Token cleared');
  }

  static bool get hasAuthToken => _jwtToken != null && _jwtToken!.isNotEmpty;
  static String? get currentToken => _jwtToken;

  /// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ token ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ log
  static String tokenPreview({int head = 20, int tail = 10}) {
    final t = _jwtToken;
    if (t == null || t.isEmpty) return '<null>';
    if (_LOG_FULL_TOKEN_IN_DEBUG && kDebugMode) return t;
    if (t.length <= head + tail) return t;
    return '${t.substring(0, head)}...${t.substring(t.length - tail)}';
  }

  /// ‡∏û‡∏¥‡∏°‡∏û‡πå token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î _LOG_FULL_TOKEN_IN_DEBUG ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô debug)
  static void printCurrentToken() {
    final label = _LOG_FULL_TOKEN_IN_DEBUG && kDebugMode
        ? '(full)'
        : '(preview)';
    if (kDebugMode) {
      print('üîê Current JWT $label: ${tokenPreview()}');
    }
  }

  // ====================== HEADERS ==========================
  static Map<String, String> get defaultHeaders {
    final headers = <String, String>{
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà CORS headers ‡∏ù‡∏±‡πà‡∏á client (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Flask)
    };

    if (hasAuthToken) {
      headers['Authorization'] = 'Bearer $_jwtToken';
    }
    return headers;
  }

  // =================== RESPONSE PARSING =====================
  static Map<String, dynamic> handleResponse(http.Response response) {
    try {
      final contentType = response.headers['content-type'] ?? '';

      if (kDebugMode) {
        final body = response.body;
        final preview = body.length > 800
            ? '${body.substring(0, 800)}...'
            : body;
        print('üì§ Response Status: ${response.statusCode}');
        print('üìÑ Response Body (preview): $preview');
      }

      if (contentType.contains('application/json')) {
        final decoded = json.decode(response.body);
        if (decoded is Map<String, dynamic>) return decoded;
        return {'success': true, 'data': decoded};
      } else {
        return {
          'success': response.statusCode >= 200 && response.statusCode < 300,
          'message': response.body,
          'raw_response': true,
        };
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing response: $e');
        print('üìù Raw response: ${response.body}');
      }
      return {
        'success': false,
        'error': 'response_parse_error',
        'message': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
        'raw_response': response.body,
      };
    }
  }

  // ===================== ERROR HANDLING =====================
  static Map<String, dynamic> handleError(dynamic error) {
    if (kDebugMode) {
      print('‚ùå API Error: $error');
      print('‚ùå Error Type: ${error.runtimeType}');
    }

    String message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
    String errorType = 'unknown_error';

    if (error.toString().contains('Failed to fetch')) {
      message =
          '‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà\n\n'
          'üîß ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n'
          '1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://127.0.0.1:5000\n'
          '2. ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS headers ‡πÉ‡∏ô Flask: from flask_cors import CORS; CORS(app)\n'
          '3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firewall/Antivirus';
      errorType = 'cors_or_server_error';
    } else if (error is SocketException) {
      message =
          'üåê ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n\n'
          'üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n'
          '‚Ä¢ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Flask ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n'
          '‚Ä¢ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: $_currentBaseUrl\n'
          '‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n'
          '‚Ä¢ Firewall settings';
      errorType = 'connection_error';
    } else if (error is HttpException) {
      message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HTTP';
      errorType = 'http_error';
    } else if (error is FormatException) {
      message = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      errorType = 'format_error';
    } else if (error.toString().contains('TimeoutException')) {
      message =
          '‚è±Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
      errorType = 'timeout_error';
    }

    return {
      'success': false,
      'error': errorType,
      'message': message,
      'details': error.toString(),
      'suggestions': _getErrorSuggestions(errorType),
    };
  }

  static List<String> _getErrorSuggestions(String errorType) {
    switch (errorType) {
      case 'cors_or_server_error':
        return [
          '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install flask-cors',
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î: CORS(app) ‡πÉ‡∏ô Flask',
          '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL: http://127.0.0.1:5000/health',
        ];
      case 'connection_error':
      default:
        return ['‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏≠‡∏õ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'];
    }
  }

  // ==================== DISCOVERY ===========================
  static Future<String?> findWorkingServer() async {
    for (String url in alternativeUrls) {
      try {
        final response = await http
            .get(Uri.parse('$url/health'))
            .timeout(const Duration(seconds: 5));
        if (response.statusCode == 200) {
          _currentBaseUrl = url;
          if (kDebugMode) print('‚úÖ Found working server at: $url');
          return url;
        }
      } catch (e) {
        if (kDebugMode) print('‚ùå $url not working: $e');
      }
    }
    return null;
  }

  // ==================== HTTP WRAPPER ========================
  static Future<Map<String, dynamic>> get(String endpoint) async =>
      _httpRequest('GET', endpoint);

  static Future<Map<String, dynamic>> post(
    String endpoint,
    Map<String, dynamic> data,
  ) async => _httpRequest('POST', endpoint, data: data);

  static Future<Map<String, dynamic>> put(
    String endpoint,
    Map<String, dynamic> data,
  ) async => _httpRequest('PUT', endpoint, data: data);

  static Future<Map<String, dynamic>> delete(String endpoint) async =>
      _httpRequest('DELETE', endpoint);

  static Future<Map<String, dynamic>> _httpRequest(
    String method,
    String endpoint, {
    Map<String, dynamic>? data,
  }) async {
    try {
      if (kDebugMode) {
        print('üöÄ $method Request: $currentBaseUrl$endpoint');
        if (data != null) print('üì¶ Data: $data');
        print('üîë Has Auth: $hasAuthToken | Bearer ${tokenPreview()}');
        final authHeader = defaultHeaders['Authorization'];
        print('üßæ Authorization header: $authHeader');
      }

      http.Response response;
      final uri = Uri.parse('$currentBaseUrl$endpoint');

      switch (method) {
        case 'GET':
          response = await http
              .get(uri, headers: defaultHeaders)
              .timeout(const Duration(seconds: 30));
          break;
        case 'POST':
          response = await http
              .post(
                uri,
                headers: defaultHeaders,
                body: data != null ? json.encode(data) : null,
              )
              .timeout(const Duration(seconds: 30));
          break;
        case 'PUT':
          response = await http
              .put(
                uri,
                headers: defaultHeaders,
                body: data != null ? json.encode(data) : null,
              )
              .timeout(const Duration(seconds: 30));
          break;
        case 'DELETE':
          response = await http
              .delete(uri, headers: defaultHeaders)
              .timeout(const Duration(seconds: 30));
          break;
        default:
          throw Exception('Unsupported HTTP method: $method');
      }
      return handleResponse(response);
    } catch (e) {
      if (e.toString().contains('Failed to fetch') || e is SocketException) {
        if (kDebugMode) print('üîÑ Trying to find alternative server...');
        final workingServer = await findWorkingServer();
        if (workingServer != null && workingServer != currentBaseUrl) {
          return _httpRequest(method, endpoint, data: data);
        }
      }
      return handleError(e);
    }
  }

  // =================== CONNECTION CHECK =====================
  static Future<Map<String, dynamic>> checkConnection() async {
    if (kDebugMode) print('üîç Checking server connection...');
    try {
      final response = await http
          .get(
            Uri.parse('$currentBaseUrl/health'),
            headers: {'Accept': 'application/json'},
          )
          .timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        return _handleSuccessfulConnection(response);
      }
    } catch (_) {}

    final workingServer = await findWorkingServer();
    if (workingServer != null) {
      try {
        final response = await http
            .get(
              Uri.parse('$workingServer/health'),
              headers: {'Accept': 'application/json'},
            )
            .timeout(const Duration(seconds: 10));
        if (response.statusCode == 200) {
          return _handleSuccessfulConnection(response);
        }
      } catch (_) {}
    }
    return {
      'success': false,
      'connected': false,
      'message':
          'üî¥ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n\n‚Ä¢ URL ‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á: ${alternativeUrls.join(', ')}\n',
      'attempted_urls': alternativeUrls,
      'suggestions': _getErrorSuggestions('connection_error'),
    };
  }

  static Map<String, dynamic> _handleSuccessfulConnection(
    http.Response response,
  ) {
    if (kDebugMode) {
      print('‚úÖ Server connected: ${response.statusCode}');
      final body = response.body;
      final preview = body.length > 800 ? '${body.substring(0, 800)}...' : body;
      print('üìÑ Server response (preview): $preview');
    }
    try {
      final data = json.decode(response.body);
      return {
        'success': true,
        'connected': true,
        'server_info': data,
        'message': '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nURL: $currentBaseUrl',
        'server_url': currentBaseUrl,
      };
    } catch (_) {
      return {
        'success': true,
        'connected': true,
        'message':
            '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nURL: $currentBaseUrl\n(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ)',
        'server_url': currentBaseUrl,
      };
    }
  }

  // ===================== SERVER INFO =======================
  static Future<Map<String, dynamic>> getServerInfo() async {
    try {
      final response = await http
          .get(
            Uri.parse('$currentBaseUrl/'),
            headers: {'Accept': 'application/json'},
          )
          .timeout(const Duration(seconds: 10));
      return handleResponse(response);
    } catch (e) {
      return handleError(e);
    }
  }

  // ======================= DEBUG ===========================
  static Map<String, dynamic> getDebugInfo() {
    return {
      'current_base_url': currentBaseUrl,
      'has_auth_token': hasAuthToken,
      'token_preview': tokenPreview(),
      'alternative_urls': alternativeUrls,
      'headers': defaultHeaders,
    };
  }
}
